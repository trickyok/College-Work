import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Does pretty much what the RSSReader did except worse
 *
 * @author Gage Farmer
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <ul>
     * <li>item 1</li>
     * </ul>
     *
     * @param xml
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @param writer
     *            it writes lol
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree xml, SimpleWriter out,
            FileWriter writer) {
        assert xml != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        try {
            writer.write("<html> <head> <title>" + xml.attributeValue("title")
                    + "</title>" + "\n");
            writer.write("</head> <body>" + "\n");
            writer.write("<h1>" + xml.attributeValue("title") + "</h1>" + "\n");
            writer.write("<ul>");

        } catch (IOException e) {
            System.out.println("Error in outputHeader");
            e.printStackTrace();
        }
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param xml
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @param writer
     *            it writes lol
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputSubHeader(XMLTree xml, SimpleWriter out,
            FileWriter writer) {

        try {

            writer.write("<html> <head> <title>"
                    + xml.child(getChildElement(xml, "title")).child(0)
                    + "</title>" + "\n");

            writer.write("</head> <body>" + "\n");

            writer.write("<h1> <a href=\""
                    + xml.child(getChildElement(xml, "link")).child(0) + "\">"
                    + xml.child(getChildElement(xml, "title")).child(0)
                    + "</h1></a>\n");

            writer.write("<p>"
                    + xml.child(getChildElement(xml, "description")).child(0)
                    + "</p>" + "\n");

            writer.write("<table border=\"1\">" + "<tr>" + "\n");
            writer.write("<th> Date </th>" + "\n");
            writer.write("<th> Source </th>" + "\n");
            writer.write("<th> News </th>" + "\n");
            writer.write("</tr>" + "\n");
        } catch (IOException e) {
            System.out.println("Error in outputHeader");
            e.printStackTrace();
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @param writer
     *            it writes lol
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out, FileWriter writer) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        try {
            writer.write("</ul>" + "\n");
            writer.write("</body> </html>" + "\n");
        } catch (IOException e) {
            System.out.println("Error in outputFooter");
            e.printStackTrace();
        }

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int i = 0;

        while (i < xml.numberOfChildren()) {
            if (xml.child(i).label() == tag) {
                break;
            } else {
                i++;
            }
        }

        return i;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @param writer
     *            it writes
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out,
            FileWriter writer) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        try {

            writer.write("<li> <a href=\"" + item.attributeValue("file") + "\">"
                    + item.attributeValue("name") + "</a></li>\n");

        } catch (IOException e) {
            System.out.println("Error in processItem");
            e.printStackTrace();
        }

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processSubItem(XMLTree item, SimpleWriter out,
            FileWriter writer) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        try {

            writer.write("<tr><td>"
                    + item.child(getChildElement(item, "pubDate")).child(0)
                    + "</td>" + "\n");
            try {
                writer.write("<td><a href=\""
                        + item.child(getChildElement(item, "source"))
                                .attributeValue("url")
                        + "\">"
                        + item.child(getChildElement(item, "source")).child(0)
                        + "</td>" + "\n");
            } catch (AssertionError a) {
                writer.write("<td><a href=\"" + "No Source Available" + "\">"
                        + "Link" + "</td>" + "\n");
            }

            try {
                writer.write("<td><a href=\""
                        + item.child(getChildElement(item, "link")).child(0)
                        + "\">"
                        + item.child(getChildElement(item, "title")).child(0)
                        + "</td>" + "\n");
            } catch (AssertionError a) {
                writer.write("<td><a href=\""
                        + item.child(getChildElement(item, "link")).child(0)
                        + "\">" + "Link" + "</td>" + "\n");
            }

            System.out.println("Item Processed");

        } catch (IOException e) {
            System.out.println("Error in processItem");
            e.printStackTrace();
        }

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param filep
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @param sub
     *            true if the url is part of a larger tree
     * @throws IOException
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String filep, SimpleWriter out,
            boolean sub) throws IOException {
        File file = new File(filep);
        FileWriter writer = new FileWriter(filep);
        XMLTree xml = new XMLTree1(url);

        if (sub) {
            outputSubHeader(xml.child(0), out, writer);
            for (int i = 0; i < xml.child(0).numberOfChildren(); i++) {
                if (xml.child(0).child(i).label() == "item") {
                    System.out.println("Processing item " + i);
                    processSubItem(xml.child(0).child(i), out, writer);
                }
            }
        } else {
            outputHeader(xml, out, writer);
            for (int i = 0; i < xml.numberOfChildren(); i++) {
                if (xml.child(i).label() == "feed") {
                    processItem(xml.child(i), out, writer);
                    processFeed(xml.child(i).attributeValue("url"),
                            xml.child(i).attributeValue("file"), out, true);
                }
            }
        }

        outputFooter(out, writer);

        writer.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        System.out.print("Enter an RSS feed URL: ");
        String input = in.nextLine();

        // start of the process recursion loop
        processFeed(input, "index.html", out, false);

        in.close();
        out.close();
    }

}