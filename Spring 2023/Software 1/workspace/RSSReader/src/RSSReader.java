import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Gage Farmer
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out,
            FileWriter writer) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        try {

            writer.write("<html> <head> <title>"
                    + channel.child(getChildElement(channel, "title")).child(0)
                    + "</title>" + "\n");
            writer.write("</head> <body>" + "\n");
            writer.write("<h1> <a href=\""
                    + channel.child(getChildElement(channel, "link")).child(0)
                    + "\">"
                    + channel.child(getChildElement(channel, "title")).child(0)
                    + "</h1></a>\n");
            writer.write("<p>" + channel
                    .child(getChildElement(channel, "description")).child(0)
                    + "</p>" + "\n");
            writer.write("<table border=\"1\">" + "<tr>" + "\n");
            writer.write("<th> Date </th>" + "\n");
            writer.write("<th> Source </th>" + "\n");
            writer.write("<th> News </th>" + "\n");
            writer.write("</tr>" + "\n");
        } catch (IOException e) {
            System.out.println("Error in outputHeader");
            e.printStackTrace();
        }
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out, FileWriter writer) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        try {
            writer.write("</table>" + "\n");
            writer.write("</body> </html>" + "\n");
        } catch (IOException e) {
            System.out.println("Error in outputFooter");
            e.printStackTrace();
        }

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        boolean found = false;
        XMLTree temp = xml;
        int i = 0;

        while (!found) {
            if (xml.child(i).label() == tag) {
                found = true;
            } else {
                i++;
            }
        }

        return i;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out,
            FileWriter writer) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        try {

            writer.write("<tr><td>"
                    + item.child(getChildElement(item, "pubDate")).child(0)
                    + "</td>" + "\n");
            writer.write("<td><a href=\""
                    + item.child(getChildElement(item, "source"))
                            .attributeValue("url")
                    + "\">"
                    + item.child(getChildElement(item, "source")).child(0)
                    + "</td>" + "\n");
            writer.write("<td><a href=\""
                    + item.child(getChildElement(item, "link")).child(0) + "\">"
                    + item.child(getChildElement(item, "title")).child(0)
                    + "</td>" + "\n");

        } catch (IOException e) {
            System.out.println("Error in processItem");
            e.printStackTrace();
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        File page = new File("page.html");
        FileWriter writer = new FileWriter("page.html");

        System.out.print("Enter an RSS feed URL: ");
        String input = in.nextLine();
        XMLTree channel = new XMLTree1(input);
        channel = channel.child(0);

        outputHeader(channel, out, writer);

        for (int i = 0; i < channel.numberOfChildren(); i++) {
            if (channel.child(i).label() == "item") {
                processItem(channel.child(i), out, writer);
            }
        }

        outputFooter(out, writer);

        writer.close();
        in.close();
        out.close();
    }

}